Obtaining the space consumed by internal objects in all currently running tasks in each session: !!str
  SELECT session_id,
    SUM(internal_objects_alloc_page_count) AS task_internal_objects_alloc_page_count,
    SUM(internal_objects_dealloc_page_count) AS task_internal_objects_dealloc_page_count
  FROM sys.dm_db_task_space_usage
  GROUP BY session_id;

Obtaining the space consumed by internal objects in the current session for both running and completed tasks: !!str
  SELECT R2.session_id,
    R1.internal_objects_alloc_page_count
      + SUM(R2.internal_objects_alloc_page_count) AS session_internal_objects_alloc_page_count,
    R1.internal_objects_dealloc_page_count
      + SUM(R2.internal_objects_dealloc_page_count) AS session_internal_objects_dealloc_page_count
  FROM sys.dm_db_session_space_usage AS R1
  INNER JOIN sys.dm_db_task_space_usage AS R2 ON R1.session_id = R2.session_id
  GROUP BY R2.session_id, R1.internal_objects_alloc_page_count,
    R1.internal_objects_dealloc_page_count;

Determining the amount of free space in tempdb: !!str
  SELECT SUM(unallocated_extent_page_count) AS [free pages],
    (SUM(unallocated_extent_page_count)*1.0/128) AS [free space in MB]
  FROM tempdb.sys.dm_db_file_space_usage;

Determining the amount of space used by the version store: !!str
  SELECT SUM(version_store_reserved_page_count) AS [version store pages used],
    (SUM(version_store_reserved_page_count)*1.0/128) AS [version store space in MB]
  FROM tempdb.sys.dm_db_file_space_usage;

Determining the amount of space used by internal objects: !!str
  SELECT SUM(internal_object_reserved_page_count) AS [internal object pages used],
    (SUM(internal_object_reserved_page_count)*1.0/128) AS [internal object space in MB]
  FROM tempdb.sys.dm_db_file_space_usage;

Determining the amount of space used by user objects: !!str
  SELECT SUM(user_object_reserved_page_count) AS [user object pages used],
    (SUM(user_object_reserved_page_count)*1.0/128) AS [user object space in MB]
  FROM tempdb.sys.dm_db_file_space_usage;

Whether or not tempdb is memory-optimized: !!str
  # https://docs.microsoft.com/en-us/sql/relational-databases/databases/tempdb-database?view=sql-server-ver15
  # To opt in to this new feature, use the following script
  # ALTER SERVER CONFIGURATION SET MEMORY_OPTIMIZED TEMPDB_METADATA = ON;
  # To protect the server from potential out-of-memory conditions, you can bind tempdb to a resource pool. This is done through the ALTER SERVER command rather than the steps you would normally follow to bind a resource pool to a database.
  # ALTER SERVER CONFIGURATION SET MEMORY_OPTIMIZED TEMPDB_METADATA = ON (RESOURCE_POOL = 'pool_name');
  # This command will force all closed and open row groups into columnstore.
  # ALTER INDEX IndFactResellerSalesXL_CCI ON FactResellerSalesXL_CCI REORGANIZE WITH (COMPRESS_ALL_ROW_GROUPS = ON);
  # To rebuild all indexes in a table
  # ALTER INDEX ALL ON Production.Product REBUILD WITH (FILLFACTOR = 80, SORT_IN_TEMPDB = ON, STATISTICS_NORECOMPUTE = ON);
  SELECT SERVERPROPERTY('IsTempdbMetadataMemoryOptimized');

Check current size and growth parameters for tempdb: !!str
  # https://docs.microsoft.com/en-us/sql/relational-databases/databases/tempdb-database?view=sql-server-ver15
  SELECT
    name AS FileName,
    size*1.0/128 AS FileSizeInMB,
    CASE max_size
        WHEN 0 THEN 'Autogrowth is off.'
        WHEN -1 THEN 'Autogrowth is on.'
        ELSE 'Log file grows to a maximum size of 2 TB.'
    END,
    growth AS 'GrowthValue',
    'GrowthIncrement' =
        CASE
            WHEN growth = 0 THEN 'Size is fixed.'
            WHEN growth > 0 AND is_percent_growth = 0
                THEN 'Growth value is in 8-KB pages.'
            ELSE 'Growth value is a percentage.'
        END
  FROM tempdb.sys.database_files;

Check the fragmentation of a columnstore index: !!str
  # https://docs.microsoft.com/en-us/sql/relational-databases/indexes/reorganize-and-rebuild-indexes?view=sql-server-ver15
  SELECT OBJECT_SCHEMA_NAME(i.object_id) AS schema_name,
         OBJECT_NAME(i.object_id) AS object_name,
         i.name AS index_name,
         i.type_desc AS index_type,
         100.0 * (ISNULL(SUM(rgs.deleted_rows), 0)) / NULLIF(SUM(rgs.total_rows), 0) AS avg_fragmentation_in_percent
  FROM sys.indexes AS i
  INNER JOIN sys.dm_db_column_store_row_group_physical_stats AS rgs
  ON i.object_id = rgs.object_id
     AND
     i.index_id = rgs.index_id
  WHERE rgs.state_desc = 'COMPRESSED'
  GROUP BY i.object_id, i.index_id, i.name, i.type_desc
  ORDER BY schema_name, object_name, index_name, index_type;

Check the fragmentation and page density of a rowstore index using Transact-SQL: !!str
  # https://docs.microsoft.com/en-us/sql/relational-databases/indexes/reorganize-and-rebuild-indexes?view=sql-server-ver15
  SELECT OBJECT_SCHEMA_NAME(ips.object_id) AS schema_name,
         OBJECT_NAME(ips.object_id) AS object_name,
         i.name AS index_name,
         i.type_desc AS index_type,
         ips.avg_fragmentation_in_percent,
         ips.avg_page_space_used_in_percent,
         ips.page_count,
         ips.alloc_unit_type_desc
  FROM sys.dm_db_index_physical_stats(DB_ID(), default, default, default, 'SAMPLED') AS ips
  INNER JOIN sys.indexes AS i 
  ON ips.object_id = i.object_id
     AND
     ips.index_id = i.index_id
  ORDER BY page_count DESC;

Индексы с фрагментацией более 20%: !!str
  # Documentation : http://msdn.microsoft.com/en-us/library/ms178534.aspx
  SELECT 
  	object_id, 
  	index_id, 
  	partition_number, 
  	avg_fragmentation_in_percent, 
  	db_name(database_id) as [db_name], 
  	ISNULL(avg_page_space_used_in_percent,100)
  FROM sys.dm_db_index_physical_stats(NULL, NULL, NULL, NULL, 'SAMPLED')
  WHERE avg_fragmentation_in_percent >= 20
  		AND database_id IN (SELECT database_id
  		    		    FROM sys.databases
  				        WHERE [state] = 0 /* ONLINE */ AND is_read_only = 0 AND database_id > 4 /* SKIP SYSTEM DB */)
  ORDER BY
  	avg_fragmentation_in_percent DESC;

Нагрузка на CPU по базам: !!str
  WITH DB_CPU_Stats
  AS
  (SELECT DatabaseID, DB_Name(DatabaseID) AS [DatabaseName], SUM(total_worker_time) AS [CPU_Time_Ms]
  FROM sys.dm_exec_query_stats AS qs
  CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID]
               FROM sys.dm_exec_plan_attributes(qs.plan_handle)
               WHERE attribute = N'dbid') AS F_DB
  GROUP BY DatabaseID)
  SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [row_num],
    DatabaseName, [CPU_Time_Ms],
    CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5,2)) AS [CPUPercent]
  FROM DB_CPU_Stats
  WHERE DatabaseID > 4 -- system databases
    AND DatabaseID <> 32767 -- ResourceDB
  ORDER BY row_num OPTION (RECOMPILE);

Наибольшая нагрузка на CPU:
  SELECT TOP 10
  [Average CPU used] = total_worker_time / qs.execution_count
  , [Total CPU used] = total_worker_time
  , [Execution count] = qs.execution_count
  , [Individual Query] = SUBSTRING(qt.text, qs.statement_start_offset / 2 + 1, 
                                    (CASE 
                                      WHEN qs.statement_end_offset = -1 
                                        THEN LEN(CONVERT(NVARCHAR(MAX), qt.text)) * 2 
                                      ELSE qs.statement_end_offset 
                                    END - qs.statement_start_offset) / 2 + 1)
  , [Parent Query] = qt.text
  , DatabaseName = DB_NAME(qt.dbid)
  FROM sys.dm_exec_query_stats qs
  CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) as qt
  ORDER BY [Average CPU used] DESC;

Топ запросов, создающих нагрузку на CPU на сервере СУБД за последний час: !!str
  SELECT
    SUM(qs.max_elapsed_time) as elapsed_time,
    SUM(qs.total_worker_time) as worker_time
  INTO T1 FROM (
    SELECT TOP 100000
    *
    FROM sys.dm_exec_query_stats qs
    WHERE qs.last_execution_time > (CURRENT_TIMESTAMP - '01:00:00.000')
    ORDER BY qs.last_execution_time DESC
  ) as qs                        
  ;
  SELECT TOP 10000
    (qs.max_elapsed_time) as elapsed_time,
    (qs.total_worker_time) as worker_time,
    qp.query_plan,
    st.text,
    dtb.name,
    qs.*,
    st.dbid
  INTO T2
    FROM sys.dm_exec_query_stats qs
    CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) qp
    CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) st
    LEFT OUTER JOIN sys.databases as dtb on st.dbid = dtb.database_id
  WHERE qs.last_execution_time > (CURRENT_TIMESTAMP - '01:00:00.000')
  ORDER BY qs.last_execution_time DESC                            
  ;
  SELECT TOP 100
    (T2.elapsed_time*100/T1.elapsed_time) as percent_elapsed_time,
    (T2.worker_time*100/T1.worker_time) as percent_worker_time,
    T2.*
  FROM
    T2 as T2
    INNER JOIN T1 as T1
    ON 1=1
  ORDER BY T2.worker_time DESC                                                            
  ;
  DROP TABLE T2
  ;
  DROP TABLE T1
  ;

Наиболее часто выполняемые запросы: !!str
  SELECT TOP 10
    [Execution count] = execution_count
  , [Individual Query] = SUBSTRING(qt.text, qs.statement_start_offset / 2 + 1,
                      (CASE WHEN qs.statement_end_offset = -1
                       THEN LEN(CONVERT(NVARCHAR(MAX), qt.text))*2
                       ELSE qs.statement_end_offset END - qs.statement_start_offset) / 2 + 1)
  , [Parent Query] = qt.text
  , [Database Name] = db_name(qt.dbid)
  FROM sys.dm_exec_query_stats qs
  CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) as qt
  ORDER BY [Execution count] DESC;

Текущая статистика по задержкам: !!str
  select top 100
    [Wait type] = wait_type,
    [Wait time (s)] = wait_time_ms / 1000,
    [% waiting] = convert(decimal(12,2), wait_time_ms * 100.0 / sum(wait_time_ms) OVER())
  from sys.dm_os_wait_stats
  where wait_type not like '%SLEEP%'
  order by wait_time_ms desc;

Базы создающие нагрузку на диск: !!str
  with
    DB_Disk_Reads_Stats
    as
   (
      select DatabaseID, db_name(DatabaseID) as DatabaseName, sum(total_physical_reads) as physical_reads
      from sys.dm_exec_query_stats qs
      cross apply (select convert(int, value) as DatabaseID
                   from sys.dm_exec_plan_attributes(qs.plan_handle)
                   where attribute = N'dbid') as F_DB
      group by DatabaseID
    )
  select ROW_NUMBER() OVER(ORDER BY [physical_reads] desc) as [row_num],
    DatabaseName, [physical_reads],
    CAST([physical_reads]*1.0/sum([physical_reads]) OVER() * 100.0 AS decimal(5, 2)) as [Physical_Reads_Percent]
  from DB_Disk_Reads_Stats
  where DatabaseID > 4 -- system databases
    and DatabaseID <> 32767
  order by row_num
  OPTION
  (RECOMPILE);

Длительные транзакции: !!str
  DECLARE @curr_date as DATETIME
  SET @curr_date = GETDATE()
  SELECT
    -- SESSION_TRAN.*,
    SESSION_TRAN.session_id AS ConnectionID, -- "Соединение с СУБД" в консоли кластера 1С
    -- TRAN_INFO.*,
    TRAN_INFO.transaction_begin_time,
    DateDiff(MINUTE, TRAN_INFO.transaction_begin_time, @curr_date) AS Duration, -- Длительность в минутах
    TRAN_INFO.transaction_type,
    -- 1 = транзакция чтения-записи;
    -- 2 = транзакция только для чтения;
    -- 3 = системная транзакция;
    -- 4 = распределенная транзакция.
    TRAN_INFO.transaction_state,
    -- 0 = транзакция ещё не была полностью инициализирована;
    -- 1 = транзакция была инициализирована, но ещё не началась;
    -- 2 = транзакция активна;
    -- 3 = транзакция закончилась;
    -- 4 = фиксирующий процесс был инициализирован на распределенной транзакции. Предназначено только для распределенных транзакций. Распределенная транзакция все еще активна, на дальнейшая обработка не может иметь место;
    -- 5 = транзакция находится в готовом состоянии и ожидает разрешения;
    -- 6 = транзакция зафиксирована;
    -- 7 = проводится откат транзакции;
    -- 8 = откат транзакции был выполнен.
    -- CONN_INFO.*,
    CONN_INFO.connect_time,
    CONN_INFO.num_reads,
    CONN_INFO.num_writes,
    CONN_INFO.last_read,
    CONN_INFO.last_write,
    CONN_INFO.client_net_address,
    CONN_INFO.most_recent_sql_handle,
    -- SQL_TEXT.*,
    SQL_TEXT.dbid,
    db_name(SQL_TEXT.dbid) as IB_NAME,
    SQL_TEXT.text,
    -- QUERIES_INFO.*,
    QUERIES_INFO.start_time,
    QUERIES_INFO.status,
    QUERIES_INFO.command,
    QUERIES_INFO.wait_type,
    QUERIES_INFO.wait_time,
    -- PLAN_INFO.*,
    PLAN_INFO.query_plan
  FROM sys.dm_tran_session_transactions AS SESSION_TRAN
    JOIN sys.dm_tran_active_transactions as TRAN_INFO
    ON SESSION_TRAN.transaction_id = TRAN_INFO.transaction_id
    LEFT JOIN sys.dm_exec_connections AS CONN_INFO
    ON SESSION_TRAN.session_id = CONN_INFO.session_id
  CROSS APPLY sys.dm_exec_sql_text(CONN_INFO.most_recent_sql_handle) AS SQL_TEXT
    LEFT JOIN sys.dm_exec_requests AS QUERIES_INFO
    ON SESSION_TRAN.session_id = QUERIES_INFO.session_id
    LEFT JOIN (
    SELECT
      VL_SESSION_TRAN.session_id AS session_id,
      VL_PLAN_INFO.query_plan AS query_plan
    FROM sys.dm_tran_session_transactions AS VL_SESSION_TRAN
      INNER JOIN sys.dm_exec_requests AS VL_QUERIES_INFO
      ON VL_SESSION_TRAN.session_id = VL_QUERIES_INFO.session_id
    CROSS APPLY sys.dm_exec_text_query_plan(VL_QUERIES_INFO.plan_handle, VL_QUERIES_INFO.statement_start_offset, VL_QUERIES_INFO.statement_end_offset) AS VL_PLAN_INFO) AS PLAN_INFO
    ON SESSION_TRAN.session_id = PLAN_INFO.session_id
  ORDER BY transaction_begin_time ASC;

Запросы с высокими издержками на ввод/вывод: !!str
  select top 100
    [Average IO] = (total_logical_reads + total_logical_writes) / qs.execution_count
  , [Total IO] = (total_logical_reads + total_logical_writes)
  , [Execution count] = qs.execution_count
  , [Individual Query] = SUBSTRING(qt.text, qs.statement_start_offset/2 + 1, (case when qs.statement_end_offset = -1 then len(convert(nvarchar(max), qt.text)) * 2 else qs.statement_end_offset end - qs.statement_start_offset)/2)
  , [Parent Query] = qt.text
  , [Database name] = db_name(qt.dbid)
  from sys.dm_exec_query_stats qs
  cross apply sys.dm_exec_sql_text(qs.sql_handle) as qt
  order by [Average IO] desc;

Использование кешей сервера СУБД: !!str
  select top(100)
    [type], sum(pages_kb) as [SPA Mem, Kb]
  from sys.dm_os_memory_clerks t
  group by [type]
  order by sum(pages_kb) desc;

Использование кешей по базам данных сервера СУБД: !!str
  select db_name(database_id) as [Database name], count(row_count)*8.00/1024.00 as MB, count(row_count)*8.00/1024.00/1024.00 as GB
  from sys.dm_os_buffer_descriptors
  group by database_id
  order by MB desc;

Свободно в tempdb: !!str
  select sum(unallocated_extent_page_count) as [free pages], (sum(unallocated_extent_page_count)*1.0/128) as [free space in MB]
  from sys.dm_db_file_space_usage;

Список длительных транзакций: !!str
  select transaction_id, *
  from sys.dm_tran_active_snapshot_database_transactions
  order by elapsed_time_seconds desc;

Оценить наличие и величину ожидания при синхронизации потоков выполнения: !!str
  with waits
            as
            (
            select
                   wait_type,
                   wait_time_ms,
                   waiting_tasks_count
            from sys.dm_os_wait_stats
            )
            select
                   waits.wait_type Wait_type,
                   waits.waiting_tasks_count Waiting_tasks,
                   waits.wait_time_ms Wait_time,
                   100 * waits.wait_time_ms / Totals.Total Percentage
            from waits
            inner join
                         (
                         select
                                sum (waits.wait_time_ms) Total
                         from waits
                         ) Totals
            on 1=1
            where waits.wait_type = N'CXPACKET';

Оценить наличие и величину ожидания ввода-вывода: !!str
  with waits
            as
            (
            select
                   wait_type,
                   wait_time_ms,
                   waiting_tasks_count
            from sys.dm_os_wait_stats
            )
            select
                   waits.wait_type Wait_type,
                   waits.waiting_tasks_count Waiting_tasks,
                   waits.wait_time_ms Wait_time,
                   100 * waits.wait_time_ms / Totals.Total Percentage
            from waits
            inner join
                         (
                         select
                                sum (waits.wait_time_ms) Total
                         from waits
                         ) Totals
            on 1=1
            where waits.wait_type = N'IO';

Количество ожидающих исполнителей, которые ждут исполнения задания: !!str
  select max([runnable_tasks_count]) as [runnable_tasks_count]
  from sys.dm_os_schedulers
  where scheduler_id<255;
